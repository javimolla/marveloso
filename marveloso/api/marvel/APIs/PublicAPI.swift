//
// PublicAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PublicAPI {
    /**
     Fetches lists of events filtered by a character id.

     - parameter characterId: (path) The character ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharacterEventsCollection(characterId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getCharacterEventsCollectionWithRequestBuilder(characterId: characterId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events filtered by a character id.
     - GET /v1/public/characters/{characterId}/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter characterId: (path) The character ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getCharacterEventsCollectionWithRequestBuilder(characterId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/characters/{characterId}/events"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "series": series, 
                        "comics": comics, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single character by id.

     - parameter characterId: (path) A single character id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharacterIndividual(characterId: Int, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getCharacterIndividualWithRequestBuilder(characterId: characterId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single character by id.
     - GET /v1/public/characters/{characterId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter characterId: (path) A single character id. 

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getCharacterIndividualWithRequestBuilder(characterId: Int) -> RequestBuilder<CharacterDataWrapper> {
        var path = "/v1/public/characters/{characterId}"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of series filtered by a character id.

     - parameter characterId: (path) The character ID 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharacterSeriesCollection(characterId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getCharacterSeriesCollectionWithRequestBuilder(characterId: characterId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, creators: creators, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of series filtered by a character id.
     - GET /v1/public/characters/{characterId}/series

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter characterId: (path) The character ID 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getCharacterSeriesCollectionWithRequestBuilder(characterId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var path = "/v1/public/characters/{characterId}/series"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "stories": stories, 
                        "events": events, 
                        "creators": creators, 
                        "seriesType": seriesType, 
                        "contains": contains, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories filtered by a character id.

     - parameter characterId: (path) The character ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharacterStoryCollection(characterId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getCharacterStoryCollectionWithRequestBuilder(characterId: characterId, modifiedSince: modifiedSince, comics: comics, series: series, events: events, creators: creators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories filtered by a character id.
     - GET /v1/public/characters/{characterId}/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter characterId: (path) The character ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getCharacterStoryCollectionWithRequestBuilder(characterId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/characters/{characterId}/stories"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "creators": creators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of characters filtered by a comic id.

     - parameter comicId: (path) The comic id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicCharacterCollection(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getComicCharacterCollectionWithRequestBuilder(comicId: comicId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of characters filtered by a comic id.
     - GET /v1/public/comics/{comicId}/characters

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter comicId: (path) The comic id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getComicCharacterCollectionWithRequestBuilder(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var path = "/v1/public/comics/{comicId}/characters"
        let comicIdPreEscape = "\(comicId)"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single comic by id.

     - parameter comicId: (path) A single comic. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicIndividual(comicId: Int, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicIndividualWithRequestBuilder(comicId: comicId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single comic by id.
     - GET /v1/public/comics/{comicId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter comicId: (path) A single comic. 

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicIndividualWithRequestBuilder(comicId: Int) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/comics/{comicId}"
        let comicIdPreEscape = "\(comicId)"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories filtered by a comic id.

     - parameter comicId: (path) The comic ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicStoryCollection(comicId: Int, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getComicStoryCollectionWithRequestBuilder(comicId: comicId, modifiedSince: modifiedSince, series: series, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories filtered by a comic id.
     - GET /v1/public/comics/{comicId}/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter comicId: (path) The comic ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getComicStoryCollectionWithRequestBuilder(comicId: Int, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/comics/{comicId}/stories"
        let comicIdPreEscape = "\(comicId)"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "series": series, 
                        "events": events, 
                        "creators": creators, 
                        "characters": characters, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics filtered by a character id.

     - parameter characterId: (path) The character id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCharacterCollection(characterId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCharacterCollectionWithRequestBuilder(characterId: characterId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics filtered by a character id.
     - GET /v1/public/characters/{characterId}/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter characterId: (path) The character id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCharacterCollectionWithRequestBuilder(characterId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/characters/{characterId}/comics"
        let characterIdPreEscape = "\(characterId)"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics.

     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variants (alternate covers, secondary printings, director&#x27;s cuts, etc.) from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCollection(format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCollectionWithRequestBuilder(format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics.
     - GET /v1/public/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variants (alternate covers, secondary printings, director&#x27;s cuts, etc.) from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCollectionWithRequestBuilder(format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        let path = "/v1/public/comics"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics filtered by a creator id.

     - parameter creatorId: (path) The creator ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCollection_0(creatorId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCollection_0WithRequestBuilder(creatorId: creatorId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter creatorId: (path) The creator ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCollection_0WithRequestBuilder(creatorId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/creators/{creatorId}/comics"
        let creatorIdPreEscape = "\(creatorId)"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "characters": characters, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics filtered by an event id.

     - parameter eventId: (path) The event id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCollection_1(eventId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCollection_1WithRequestBuilder(eventId: eventId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics filtered by an event id.
     - GET /v1/public/events/{eventId}/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) The event id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCollection_1WithRequestBuilder(eventId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/events/{eventId}/comics"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics filtered by a series id.

     - parameter seriesId: (path) The series ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCollection_2(seriesId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCollection_2WithRequestBuilder(seriesId: seriesId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics filtered by a series id.
     - GET /v1/public/series/{seriesId}/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) The series ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCollection_2WithRequestBuilder(seriesId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/series/{seriesId}/comics"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "events": events, 
                        "stories": stories, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of comics filtered by a story id.

     - parameter storyId: (path) The story ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComicsCollection_3(storyId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: ComicDataWrapper?,_ error: Error?) -> Void)) {
        getComicsCollection_3WithRequestBuilder(storyId: storyId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of comics filtered by a story id.
     - GET /v1/public/stories/{storyId}/comics

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    }, {
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "issueNumber" : 9.301444243932576,
      "isbn" : "isbn",
      "description" : "description",
      "variants" : [ {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }, {
        "name" : "name",
        "resourceURI" : "resourceURI"
      } ],
      "title" : "title",
      "diamondCode" : "diamondCode",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "ean" : "ean",
      "collections" : [ null, null ],
      "modified" : "2000-01-23",
      "id" : 2,
      "prices" : [ {
        "price" : 2.027123,
        "type" : "type"
      }, {
        "price" : 2.027123,
        "type" : "type"
      } ],
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "collectedIssues" : [ null, null ],
      "pageCount" : 3,
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "images" : [ null, null ],
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "textObjects" : [ {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      }, {
        "language" : "language",
        "text" : "text",
        "type" : "type"
      } ],
      "digitalId" : 7,
      "format" : "format",
      "upc" : "upc",
      "dates" : [ {
        "date" : "2000-01-23",
        "type" : "type"
      }, {
        "date" : "2000-01-23",
        "type" : "type"
      } ],
      "resourceURI" : "resourceURI",
      "variantDescription" : "variantDescription",
      "issn" : "issn",
      "series" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) The story ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsCollection_3WithRequestBuilder(storyId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var path = "/v1/public/stories/{storyId}/comics"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "formatType": formatType, 
                        "noVariants": noVariants, 
                        "dateDescriptor": dateDescriptor, 
                        "dateRange": dateRange, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "issueNumber": issueNumber?.encodeToJSON(), 
                        "diamondCode": diamondCode, 
                        "digitalId": digitalId?.encodeToJSON(), 
                        "upc": upc, 
                        "isbn": isbn, 
                        "ean": ean, 
                        "issn": issn, 
                        "hasDigitalIssue": hasDigitalIssue, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "events": events, 
                        "sharedAppearances": sharedAppearances, 
                        "collaborators": collaborators, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ComicDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of characters.

     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollectionWithRequestBuilder(name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of characters.
     - GET /v1/public/characters

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getCreatorCollectionWithRequestBuilder(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        let path = "/v1/public/characters"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of creators filtered by a comic id.

     - parameter comicId: (path) The comic id. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_0(comicId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_0WithRequestBuilder(comicId: comicId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of creators filtered by a comic id.
     - GET /v1/public/comics/{comicId}/creators

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter comicId: (path) The comic id. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorCollection_0WithRequestBuilder(comicId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var path = "/v1/public/comics/{comicId}/creators"
        let comicIdPreEscape = "\(comicId)"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "firstName": firstName, 
                        "middleName": middleName, 
                        "lastName": lastName, 
                        "suffix": suffix, 
                        "nameStartsWith": nameStartsWith, 
                        "firstNameStartsWith": firstNameStartsWith, 
                        "middleNameStartsWith": middleNameStartsWith, 
                        "lastNameStartsWith": lastNameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of creators.

     - parameter firstName: (query) Filter by creator first name (e.g. Brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_1(firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_1WithRequestBuilder(firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of creators.
     - GET /v1/public/creators

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter firstName: (query) Filter by creator first name (e.g. Brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorCollection_1WithRequestBuilder(firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        let path = "/v1/public/creators"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "firstName": firstName, 
                        "middleName": middleName, 
                        "lastName": lastName, 
                        "suffix": suffix, 
                        "nameStartsWith": nameStartsWith, 
                        "firstNameStartsWith": firstNameStartsWith, 
                        "middleNameStartsWith": middleNameStartsWith, 
                        "lastNameStartsWith": lastNameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of creators filtered by an event id.

     - parameter eventId: (path) The event ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_2(eventId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_2WithRequestBuilder(eventId: eventId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of creators filtered by an event id.
     - GET /v1/public/events/{eventId}/creators

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) The event ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorCollection_2WithRequestBuilder(eventId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var path = "/v1/public/events/{eventId}/creators"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "firstName": firstName, 
                        "middleName": middleName, 
                        "lastName": lastName, 
                        "suffix": suffix, 
                        "nameStartsWith": nameStartsWith, 
                        "firstNameStartsWith": firstNameStartsWith, 
                        "middleNameStartsWith": middleNameStartsWith, 
                        "lastNameStartsWith": lastNameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of creators filtered by a series id.

     - parameter seriesId: (path) The series ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_3(seriesId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_3WithRequestBuilder(seriesId: seriesId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of creators filtered by a series id.
     - GET /v1/public/series/{seriesId}/creators

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) The series ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorCollection_3WithRequestBuilder(seriesId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var path = "/v1/public/series/{seriesId}/creators"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "firstName": firstName, 
                        "middleName": middleName, 
                        "lastName": lastName, 
                        "suffix": suffix, 
                        "nameStartsWith": nameStartsWith, 
                        "firstNameStartsWith": firstNameStartsWith, 
                        "middleNameStartsWith": middleNameStartsWith, 
                        "lastNameStartsWith": lastNameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "events": events, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of characters filtered by a story id.

     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_4(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_4WithRequestBuilder(storyId: storyId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of characters filtered by a story id.
     - GET /v1/public/stories/{storyId}/characters

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getCreatorCollection_4WithRequestBuilder(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var path = "/v1/public/stories/{storyId}/characters"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of creators filtered by a story id.

     - parameter storyId: (path) The story ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorCollection_5(storyId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorCollection_5WithRequestBuilder(storyId: storyId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of creators filtered by a story id.
     - GET /v1/public/stories/{storyId}/creators

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) The story ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorCollection_5WithRequestBuilder(storyId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var path = "/v1/public/stories/{storyId}/creators"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "firstName": firstName, 
                        "middleName": middleName, 
                        "lastName": lastName, 
                        "suffix": suffix, 
                        "nameStartsWith": nameStartsWith, 
                        "firstNameStartsWith": firstNameStartsWith, 
                        "middleNameStartsWith": middleNameStartsWith, 
                        "lastNameStartsWith": lastNameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of events filtered by a creator id.

     - parameter creatorId: (path) The creator ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorEventsCollection(creatorId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorEventsCollectionWithRequestBuilder(creatorId: creatorId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, characters: characters, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter creatorId: (path) The creator ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getCreatorEventsCollectionWithRequestBuilder(creatorId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/creators/{creatorId}/events"
        let creatorIdPreEscape = "\(creatorId)"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "characters": characters, 
                        "series": series, 
                        "comics": comics, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single creator by id.

     - parameter creatorId: (path) A single creator id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorIndividual(creatorId: Int, completion: @escaping ((_ data: CreatorDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorIndividualWithRequestBuilder(creatorId: creatorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single creator by id.
     - GET /v1/public/creators/{creatorId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "lastName" : "lastName",
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "fullName" : "fullName",
      "resourceURI" : "resourceURI",
      "suffix" : "suffix",
      "firstName" : "firstName",
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "middleName" : "middleName",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter creatorId: (path) A single creator id. 

     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorIndividualWithRequestBuilder(creatorId: Int) -> RequestBuilder<CreatorDataWrapper> {
        var path = "/v1/public/creators/{creatorId}"
        let creatorIdPreEscape = "\(creatorId)"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CreatorDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of series filtered by a creator id.

     - parameter creatorId: (path) The creator ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorSeriesCollection(creatorId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorSeriesCollectionWithRequestBuilder(creatorId: creatorId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of series filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/series

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter creatorId: (path) The creator ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getCreatorSeriesCollectionWithRequestBuilder(creatorId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var path = "/v1/public/creators/{creatorId}/series"
        let creatorIdPreEscape = "\(creatorId)"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "stories": stories, 
                        "events": events, 
                        "characters": characters, 
                        "seriesType": seriesType, 
                        "contains": contains, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories filtered by a creator id.

     - parameter creatorId: (path) The ID of the creator. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCreatorStoryCollection(creatorId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getCreatorStoryCollectionWithRequestBuilder(creatorId: creatorId, modifiedSince: modifiedSince, comics: comics, series: series, events: events, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter creatorId: (path) The ID of the creator. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getCreatorStoryCollectionWithRequestBuilder(creatorId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/creators/{creatorId}/stories"
        let creatorIdPreEscape = "\(creatorId)"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "characters": characters, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of characters filtered by an event id.

     - parameter eventId: (path) The event ID 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventCharacterCollection(eventId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getEventCharacterCollectionWithRequestBuilder(eventId: eventId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of characters filtered by an event id.
     - GET /v1/public/events/{eventId}/characters

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) The event ID 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getEventCharacterCollectionWithRequestBuilder(eventId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var path = "/v1/public/events/{eventId}/characters"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single event by id.

     - parameter eventId: (path) A single event. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventIndividual(eventId: Int, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getEventIndividualWithRequestBuilder(eventId: eventId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single event by id.
     - GET /v1/public/events/{eventId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) A single event. 

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventIndividualWithRequestBuilder(eventId: Int) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/events/{eventId}"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of series filtered by an event id.

     - parameter eventId: (path) The event ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventSeriesCollection(eventId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getEventSeriesCollectionWithRequestBuilder(eventId: eventId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of series filtered by an event id.
     - GET /v1/public/events/{eventId}/series

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) The event ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getEventSeriesCollectionWithRequestBuilder(eventId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var path = "/v1/public/events/{eventId}/series"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "stories": stories, 
                        "creators": creators, 
                        "characters": characters, 
                        "seriesType": seriesType, 
                        "contains": contains, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories filtered by an event id.

     - parameter eventId: (path) The ID of the event. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventStoryCollection(eventId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getEventStoryCollectionWithRequestBuilder(eventId: eventId, modifiedSince: modifiedSince, comics: comics, series: series, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories filtered by an event id.
     - GET /v1/public/events/{eventId}/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter eventId: (path) The ID of the event. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getEventStoryCollectionWithRequestBuilder(eventId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/events/{eventId}/stories"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "creators": creators, 
                        "characters": characters, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of events.

     - parameter name: (query) Return only events which match the specified name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which take place in the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsCollection(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getEventsCollectionWithRequestBuilder(name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events.
     - GET /v1/public/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter name: (query) Return only events which match the specified name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which take place in the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsCollectionWithRequestBuilder(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        let path = "/v1/public/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "comics": comics, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of events filtered by a series id.

     - parameter seriesId: (path) The series ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsCollection_0(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getEventsCollection_0WithRequestBuilder(seriesId: seriesId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events filtered by a series id.
     - GET /v1/public/series/{seriesId}/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) The series ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsCollection_0WithRequestBuilder(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/series/{seriesId}/events"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "comics": comics, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of events filtered by a story id.

     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsCollection_1(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getEventsCollection_1WithRequestBuilder(storyId: storyId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, comics: comics, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events filtered by a story id.
     - GET /v1/public/stories/{storyId}/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsCollection_1WithRequestBuilder(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/stories/{storyId}/events"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "comics": comics, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of events filtered by a comic id.

     - parameter comicId: (path) The comic ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueEventsCollection(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: EventDataWrapper?,_ error: Error?) -> Void)) {
        getIssueEventsCollectionWithRequestBuilder(comicId: comicId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of events filtered by a comic id.
     - GET /v1/public/comics/{comicId}/events

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "start" : "2000-01-23",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "end" : "2000-01-23",
      "id" : 2
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter comicId: (path) The comic ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getIssueEventsCollectionWithRequestBuilder(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var path = "/v1/public/comics/{comicId}/events"
        let comicIdPreEscape = "\(comicId)"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "creators": creators, 
                        "characters": characters, 
                        "series": series, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EventDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of characters filtered by a series id.

     - parameter seriesId: (path) The series id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSeriesCharacterWrapper(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: CharacterDataWrapper?,_ error: Error?) -> Void)) {
        getSeriesCharacterWrapperWithRequestBuilder(seriesId: seriesId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of characters filtered by a series id.
     - GET /v1/public/series/{seriesId}/characters

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "name" : "name",
      "description" : "description",
      "modified" : "2000-01-23",
      "id" : 2,
      "resourceURI" : "resourceURI",
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) The series id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getSeriesCharacterWrapperWithRequestBuilder(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var path = "/v1/public/series/{seriesId}/characters"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "nameStartsWith": nameStartsWith, 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "events": events, 
                        "stories": stories, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CharacterDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of series.

     - parameter title: (query) Return only series matching the specified title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSeriesCollection(title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getSeriesCollectionWithRequestBuilder(title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of series.
     - GET /v1/public/series

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter title: (query) Return only series matching the specified title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getSeriesCollectionWithRequestBuilder(title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        let path = "/v1/public/series"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "stories": stories, 
                        "events": events, 
                        "creators": creators, 
                        "characters": characters, 
                        "seriesType": seriesType, 
                        "contains": contains, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single comic series by id.

     - parameter seriesId: (path) Filter by series title. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSeriesIndividual(seriesId: Int, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getSeriesIndividualWithRequestBuilder(seriesId: seriesId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single comic series by id.
     - GET /v1/public/series/{seriesId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) Filter by series title. 

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getSeriesIndividualWithRequestBuilder(seriesId: Int) -> RequestBuilder<SeriesDataWrapper> {
        var path = "/v1/public/series/{seriesId}"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories filtered by a series id.

     - parameter seriesId: (path) The series ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSeriesStoryCollection(seriesId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getSeriesStoryCollectionWithRequestBuilder(seriesId: seriesId, modifiedSince: modifiedSince, comics: comics, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories filtered by a series id.
     - GET /v1/public/series/{seriesId}/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter seriesId: (path) The series ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getSeriesStoryCollectionWithRequestBuilder(seriesId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/series/{seriesId}/stories"
        let seriesIdPreEscape = "\(seriesId)"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "events": events, 
                        "creators": creators, 
                        "characters": characters, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of stories.

     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStoryCollection(modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getStoryCollectionWithRequestBuilder(modifiedSince: modifiedSince, comics: comics, series: series, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of stories.
     - GET /v1/public/stories

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getStoryCollectionWithRequestBuilder(modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        let path = "/v1/public/stories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "series": series, 
                        "events": events, 
                        "creators": creators, 
                        "characters": characters, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches a single comic story by id.

     - parameter storyId: (path) Filter by story id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStoryIndividual(storyId: Int, completion: @escaping ((_ data: StoryDataWrapper?,_ error: Error?) -> Void)) {
        getStoryIndividualWithRequestBuilder(storyId: storyId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches a single comic story by id.
     - GET /v1/public/stories/{storyId}

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "type" : "type",
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "originalissue" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "series" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) Filter by story id. 

     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getStoryIndividualWithRequestBuilder(storyId: Int) -> RequestBuilder<StoryDataWrapper> {
        var path = "/v1/public/stories/{storyId}"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StoryDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Fetches lists of series filtered by a story id.

     - parameter storyId: (path) The story ID. 
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStorySeriesCollection(storyId: Int, events: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: SeriesDataWrapper?,_ error: Error?) -> Void)) {
        getStorySeriesCollectionWithRequestBuilder(storyId: storyId, events: events, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fetches lists of series filtered by a story id.
     - GET /v1/public/stories/{storyId}/series

     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "code" : 0,
  "data" : {
    "total" : 5,
    "offset" : 6,
    "limit" : 1,
    "count" : 5,
    "results" : [ {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    }, {
      "next" : {
        "name" : "name",
        "resourceURI" : "resourceURI"
      },
      "thumbnail" : {
        "path" : "path",
        "extension" : "extension"
      },
      "stories" : {
        "collectionURI" : "collectionURI",
        "available" : 3,
        "returned" : 2,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI",
          "type" : "type"
        } ]
      },
      "creators" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "comics" : {
        "collectionURI" : "collectionURI",
        "available" : 7,
        "returned" : 9,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "startYear" : 7,
      "rating" : "rating",
      "description" : "description",
      "resourceURI" : "resourceURI",
      "title" : "title",
      "endYear" : 9,
      "characters" : {
        "collectionURI" : "collectionURI",
        "available" : 1,
        "returned" : 1,
        "items" : [ {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "role" : "role",
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      },
      "urls" : [ {
        "type" : "type",
        "url" : "url"
      }, {
        "type" : "type",
        "url" : "url"
      } ],
      "modified" : "2000-01-23",
      "id" : 2,
      "events" : {
        "collectionURI" : "collectionURI",
        "available" : 4,
        "returned" : 7,
        "items" : [ {
          "name" : "name",
          "resourceURI" : "resourceURI"
        }, {
          "name" : "name",
          "resourceURI" : "resourceURI"
        } ]
      }
    } ]
  },
  "attributionHTML" : "attributionHTML",
  "attributionText" : "attributionText",
  "etag" : "etag",
  "status" : "status"
}}]
     - parameter storyId: (path) The story ID. 
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)

     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getStorySeriesCollectionWithRequestBuilder(storyId: Int, events: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var path = "/v1/public/stories/{storyId}/series"
        let storyIdPreEscape = "\(storyId)"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "events": events, 
                        "title": title, 
                        "titleStartsWith": titleStartsWith, 
                        "startYear": startYear?.encodeToJSON(), 
                        "modifiedSince": modifiedSince?.encodeToJSON(), 
                        "comics": comics, 
                        "creators": creators, 
                        "characters": characters, 
                        "seriesType": seriesType, 
                        "contains": contains, 
                        "orderBy": orderBy, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SeriesDataWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
